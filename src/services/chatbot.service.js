// // chatbot.service.js - Phi√™n b·∫£n ho√†n ch·ªânh c√≥ l∆∞u ng·ªØ c·∫£nh (context) v√† h·ªó tr·ª£ tr·∫£ l·ªùi theo c√¢u tr∆∞·ªõc

// const { OpenAI } = require("openai");
// const Sach = require("../models/sach.model");
// const TacGia = require("../models/tacgia.model");
// const NhaXuatBan = require("../models/nhaxuatban.model");
// const SachCopy = require("../models/sachCopy.model");
// const LoaiSach = require("../models/loaisach.model");
// const ChatLog = require("../models/chatlog.model");
// require("dotenv").config();

// const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
// const sessions = {};

// const normalize = (str) =>
//   (str || "").toString().normalize("NFD").replace(/[ÃÄ-ÕØ]/g, "").toLowerCase();

// function detectIntent(message, authors, publishers, types) {
//   const norm = normalize(message);
//   const isAskingQuantity =
//     /bao nhieu|t·ªïng s·ªë|tong so|so luong|co bao nhieu|co may|bao nhiu/.test(
//       norm
//     );

//   const matchedAuthor = authors.find((a) => norm.includes(normalize(a.TenTG)));
//   const matchedPublisher = publishers.find((p) =>
//     norm.includes(normalize(p.TenNXB))
//   );
//   const matchedType = types.find((t) =>
//     norm.includes(normalize(t.TenLoai || ""))
//   );

//   const isAskingTotalBooks = isAskingQuantity && /sach|s√°ch/.test(norm);
//   const isAskingTotalTypes = isAskingQuantity && /loai|th·ªÉ lo·∫°i/.test(norm);
//   const isAskingTotalAuthors = isAskingQuantity && /tac gia|t√°c gi·∫£/.test(norm);
//   const isAskingAuthorList =
//     /thong tin.*tac gia|danh sach.*tac gia|tac gia.*nao|cac tac gia/i.test(
//       norm
//     );

//   return {
//     isAskingQuantity,
//     isAskingTotalBooks,
//     isAskingTotalTypes,
//     isAskingTotalAuthors,
//     isAskingAuthorList,
//     matchedAuthor,
//     matchedPublisher,
//     matchedType,
//   };
// }

// async function saveAndReturnReply(MaDocGia, userMessage, reply, context = {}) {
//   const prev = sessions[MaDocGia] || {};
//   const history = prev.history || [];
//   history.push({ role: "user", content: userMessage });
//   history.push({ role: "assistant", content: reply });

//   sessions[MaDocGia] = {
//     history,
//     context: { ...prev.context, ...context },
//   };

//   await ChatLog.create({ MaDocGia, question: userMessage, answer: reply });
//   return reply;
// }

// class ChatbotService {
//   static async getResponse(message, MaDocGia) {
//     const userMessage = message.trim();
//     const prevSession = sessions[MaDocGia] || {};
//     const history = prevSession.history || [];
//     let context = prevSession.context || {};

//     if (/^(xin ch√†o|ch√†o|hello|hi|chao|hey)/i.test(userMessage)) {
//       const reply =
//         "üëã Xin ch√†o! B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ s√°ch, t√°c gi·∫£ hay th∆∞ vi·ªán? T√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª°.";
//       return await saveAndReturnReply(MaDocGia, userMessage, reply);
//     }

//     const [allBooks, allAuthors, allPublishers, allTypes] = await Promise.all([
//       Sach.find({}, "_id TenSach TacGia MaLoai NamXuatBan"),
//       TacGia.find({}, "_id TenTG"),
//       NhaXuatBan.find({}, "_id TenNXB DiaChi"),
//       LoaiSach.find({}, "_id TenLoai"),
//     ]);

//     let {
//       isAskingQuantity,
//       isAskingTotalBooks,
//       isAskingTotalTypes,
//       isAskingTotalAuthors,
//       isAskingAuthorList,
//       matchedAuthor,
//       matchedPublisher,
//       matchedType,
//     } = detectIntent(userMessage, allAuthors, allPublishers, allTypes);

//     if (!matchedAuthor && context.matchedAuthor)
//       matchedAuthor = context.matchedAuthor;
//     if (!matchedPublisher && context.matchedPublisher)
//       matchedPublisher = context.matchedPublisher;
//     if (!matchedType && context.matchedType) matchedType = context.matchedType;

//     const normMsg = normalize(userMessage);
//     let matchedBookTitles = allBooks
//       .map((b) => b.TenSach)
//       .filter((title) => normMsg.includes(normalize(title)));

//     if (matchedBookTitles.length === 0 && context.matchedBookTitles) {
//       matchedBookTitles = context.matchedBookTitles;
//     }

//     if (/ten (la|l√†) gi/i.test(userMessage) && history.length >= 2) {
//       const lastUserMsg = history[history.length - 2]?.content || "";
//       if (/bao nhieu (sach|s√°ch)/i.test(normalize(lastUserMsg))) {
//         const tenSach = allBooks.map((b) => b.TenSach).slice(0, 5);
//         const reply =
//           tenSach.length > 0
//             ? `üìò M·ªôt v√†i ƒë·∫ßu s√°ch trong th∆∞ vi·ªán g·ªìm:\n- ${tenSach.join(
//                 "\n- "
//               )}`
//             : "üìò Hi·ªán t·∫°i th∆∞ vi·ªán ch∆∞a c√≥ ƒë·∫ßu s√°ch n√†o.";
//         return await saveAndReturnReply(MaDocGia, userMessage, reply);
//       }
//     }

//     if (/(\bc√≤n\b.*s√°ch|\bs√°ch\b.*\bc√≤n\b)/.test(normMsg)) {
//       const authorContext = matchedAuthor || context.matchedAuthor;
//       if (authorContext) {
//         const count = await Sach.countDocuments({ TacGia: authorContext._id });
//         const reply = count
//           ? `üìò T√°c gi·∫£ **${authorContext.TenTG}** c√≤n kho·∫£ng **${count} ƒë·∫ßu s√°ch** trong th∆∞ vi·ªán.`
//           : `üìò Hi·ªán t·∫°i kh√¥ng c√≤n s√°ch n√†o c·ªßa t√°c gi·∫£ **${authorContext.TenTG}** trong th∆∞ vi·ªán.`;
//         return await saveAndReturnReply(MaDocGia, userMessage, reply, {
//           matchedAuthor: authorContext,
//         });
//       }
//     }

//     if (isAskingQuantity && matchedBookTitles.length > 0) {
//       const matchedBooks = await Sach.find({
//         TenSach: { $in: matchedBookTitles },
//       });
//       const bookIds = matchedBooks.map((b) => b._id);
//       const copies = await SachCopy.find({ MaSach: { $in: bookIds } });
//       const totalCopies = copies.reduce((sum, c) => sum + (c.SoQuyen || 0), 0);

//       const reply = `üìò Trong th∆∞ vi·ªán c√≥ kho·∫£ng **${totalCopies} quy·ªÉn s√°ch** thu·ªôc "${matchedBookTitles.join(
//         ", "
//       )}".`;
//       return await saveAndReturnReply(MaDocGia, userMessage, reply, {
//         matchedBookTitles,
//       });
//     }

//     if (isAskingTotalBooks) {
//       const count = await Sach.countDocuments({});
//       const reply = `üìö Th∆∞ vi·ªán hi·ªán c√≥ t·ªïng c·ªông kho·∫£ng **${count} ƒë·∫ßu s√°ch** kh√°c nhau.`;
//       return await saveAndReturnReply(MaDocGia, userMessage, reply);
//     }

//     if (isAskingTotalAuthors) {
//       const reply = `‚úçÔ∏è Th∆∞ vi·ªán hi·ªán c√≥ kho·∫£ng **${allAuthors.length} t√°c gi·∫£** kh√°c nhau.`;
//       return await saveAndReturnReply(MaDocGia, userMessage, reply);
//     }

//     if (isAskingAuthorList) {
//       const names = allAuthors.map((a, i) => `${i + 1}. ${a.TenTG}`).join("\n");
//       const reply = `üìñ Danh s√°ch c√°c t√°c gi·∫£ trong th∆∞ vi·ªán:\n${names}`;
//       return await saveAndReturnReply(MaDocGia, userMessage, reply);
//     }

//     if (isAskingQuantity && matchedAuthor) {
//       const count = await Sach.countDocuments({ TacGia: matchedAuthor._id });
//       const reply = `üìò T√°c gi·∫£ **${matchedAuthor.TenTG}** c√≥ kho·∫£ng **${count} ƒë·∫ßu s√°ch** trong th∆∞ vi·ªán.`;
//       return await saveAndReturnReply(MaDocGia, userMessage, reply, {
//         matchedAuthor,
//       });
//     }

//     const query = {};
//     if (matchedBookTitles.length) query.TenSach = { $in: matchedBookTitles };
//     else if (matchedAuthor) query.TacGia = matchedAuthor._id;

//     const books = await Sach.find(query)
//       .limit(5)
//       .populate("TacGia")
//       .populate("MaLoai");
//     const bookIds = books.map((b) => b._id);
//     const copies = await SachCopy.find({ MaSach: { $in: bookIds } }).populate(
//       "MaViTri"
//     );

//     let sachText = books.length
//       ? books
//           .map((book) => {
//             const relatedCopies = copies.filter((c) =>
//               c.MaSach.equals(book._id)
//             );
//             const tacgia = Array.isArray(book.TacGia)
//               ? book.TacGia.map((t) => t.TenTG).join(", ")
//               : book.TacGia?.TenTG || "Kh√¥ng r√µ";

//             const copyText = relatedCopies
//               .map(
//                 (c) =>
//                   `- ${c.TenLoaiBanSao} (${c.SoQuyen - c.SoLuongDaMuon}/${
//                     c.SoQuyen
//                   })`
//               )
//               .join("\n");

//             return `üìò \"${book.TenSach}\"\nT√°c gi·∫£: ${tacgia}\n${copyText}`;
//           })
//           .join("\n\n---\n\n")
//       : "ü§ñ Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";

//     const messages = [
//       {
//         role: "system",
//         content:
//           "B·∫°n l√† tr·ª£ l√Ω th∆∞ vi·ªán. Tr·∫£ l·ªùi ch√≠nh x√°c theo d·ªØ li·ªáu, kh√¥ng b·ªãa ƒë·∫∑t.",
//       },
//       { role: "system", content: `D·ªØ li·ªáu s√°ch:\n${sachText}` },
//       ...history.slice(-5),
//       { role: "user", content: userMessage },
//     ];

//     const completion = await openai.chat.completions.create({
//       model: "gpt-3.5-turbo",
//       messages,
//     });

//     const reply =
//       completion.choices?.[0]?.message?.content ||
//       "ü§ñ Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.";

//     return await saveAndReturnReply(MaDocGia, userMessage, reply, {
//       matchedAuthor,
//       matchedPublisher,
//       matchedType,
//       matchedBookTitles: matchedBookTitles.length
//         ? matchedBookTitles
//         : undefined,
//     });
//   }
// }
const { OpenAI } = require("openai");
const Sach = require("../models/sach.model");
const TacGia = require("../models/tacgia.model");
const ChatLog = require("../models/chatlog.model");
const SachCopy = require("../models/sachCopy.model");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const sessions = {};

async function analyzeIntent(userMessage) {
  const messages = [
    {
      role: "system",
      content: `B·∫°n l√† tr√¨nh ph√¢n t√≠ch c√¢u h·ªèi v·ªÅ th∆∞ vi·ªán.
V√≠ d·ª•:
- "Trong th∆∞ vi·ªán c√≥ bao nhi√™u s√°ch?" ‚Üí intent: "hoi_soluong_sach"
- "T√°c gi·∫£ Nguy·ªÖn Nh·∫≠t √Ånh c√≥ s√°ch kh√¥ng?" ‚Üí intent: "hoi_sach_cua_tac_gia"
- "S√°ch ƒë√≥ c√≤n kh√¥ng?" ‚Üí intent: "hoi_sach_con_khong"
- "T√¥i mu·ªën t√¨m s√°ch thi·∫øu nhi" ‚Üí intent: "tim_sach", category: "thi·∫øu nhi"
- "Ai l√† t√°c gi·∫£ cu·ªën L∆∞·ª£c s·ª≠ th·ªùi gian?" ‚Üí intent: "hoi_tac_gia"`,
    },
    { role: "user", content: userMessage },
  ];

  const functions = [
    {
      name: "extract_info",
      parameters: {
        type: "object",
        properties: {
          intent: {
            type: "string",
            description:
              "tim_sach, hoi_sach_cua_tac_gia, hoi_tac_gia, hoi_soluong_sach, hoi_sach_con_khong, hoi_the_loai, hoi_nxb, hoi_gioi_thieu, khac",
          },
          bookTitle: { type: "string" },
          author: { type: "string" },
          publisher: { type: "string" },
          category: { type: "string" },
          followUp: { type: "boolean" },
        },
      },
    },
  ];

  const res = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    messages,
    functions,
    function_call: { name: "extract_info" },
  });

  try {
    return JSON.parse(res.choices[0].message.function_call.arguments);
  } catch (e) {
    return { intent: "khac" };
  }
}

async function saveReply(MaDocGia, userMessage, reply, context = {}) {
  const prev = sessions[MaDocGia] || {};
  const history = prev.history || [];

  history.push({ role: "user", content: userMessage });
  history.push({ role: "assistant", content: reply });

  sessions[MaDocGia] = {
    history,
    context: { ...prev.context, ...context },
  };

  await ChatLog.create({ MaDocGia, question: userMessage, answer: reply });
  return reply;
}

class ChatbotService {
  static async getResponse(message, MaDocGia) {
    const userMessage = message.trim();
    const prevSession = sessions[MaDocGia] || {};
    const history = prevSession.history || [];
    let context = prevSession.context || {};

    if (/^(hi|ch√†o|hello|hey|xin ch√†o)/i.test(userMessage)) {
      const reply =
        "üëã Xin ch√†o! B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ s√°ch, t√°c gi·∫£ hay th∆∞ vi·ªán? T√¥i s·∫µn s√†ng h·ªó tr·ª£.";
      return await saveReply(MaDocGia, userMessage, reply);
    }

    const { intent, bookTitle, author, publisher, category } =
      await analyzeIntent(userMessage);

    const matchedBookTitle = bookTitle || context.bookTitle || "";
    const matchedAuthor = author || context.author || "";

    // 1. T·ªïng s·ªë ƒë·∫ßu s√°ch
    if (intent === "hoi_soluong_sach") {
      const count = await Sach.countDocuments({});
      const reply = `üìö Th∆∞ vi·ªán hi·ªán c√≥ kho·∫£ng **${count} ƒë·∫ßu s√°ch** kh√°c nhau.`;
      return await saveReply(MaDocGia, userMessage, reply, context);
    }

    // 2. T√¨m s√°ch theo th·ªÉ lo·∫°i
    if (intent === "tim_sach" && category) {
      const books = await Sach.find({
        MoTa: { $regex: category, $options: "i" },
      }).limit(10);

      if (!books.length) {
        return await saveReply(
          MaDocGia,
          userMessage,
          `üìö Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p v·ªõi th·ªÉ lo·∫°i "${category}".`,
          context
        );
      }

      const bookIds = books.map((b) => b._id);
      const copies = await SachCopy.find({ MaSach: { $in: bookIds } });

      const reply =
        `üìö M·ªôt s·ªë s√°ch thu·ªôc ch·ªß ƒë·ªÅ "${category}":\n\n` +
        books
          .map((b, i) => {
            const related = copies.filter((c) => c.MaSach.equals(b._id));
            const total = related.reduce((sum, c) => sum + c.SoQuyen, 0);
            const borrowed = related.reduce(
              (sum, c) => sum + c.SoLuongDaMuon,
              0
            );
            const available = total - borrowed;
            return `${i + 1}. ${b.TenSach} ‚Äì üìö C√≤n: ${available}/${total}`;
          })
          .join("\n");

      return await saveReply(MaDocGia, userMessage, reply, {
        ...context,
        category,
      });
    }

    // 3. S√°ch c·ªßa t√°c gi·∫£ (k√®m s·ªë l∆∞·ª£ng c√≤n l·∫°i)
    if (
      intent === "hoi_sach_cua_tac_gia" ||
      (intent === "tim_sach" && author)
    ) {
      const tacGia = await TacGia.findOne({
        TenTG: { $regex: matchedAuthor, $options: "i" },
      });

      if (!tacGia) {
        return await saveReply(
          MaDocGia,
          userMessage,
          `‚ùå Kh√¥ng t√¨m th·∫•y t√°c gi·∫£ "${matchedAuthor}".`,
          context
        );
      }

      const books = await Sach.find({ TacGia: tacGia._id }).limit(10);
      if (!books.length) {
        return await saveReply(
          MaDocGia,
          userMessage,
          `ü§ñ T√°c gi·∫£ "${matchedAuthor}" hi·ªán ch∆∞a c√≥ s√°ch trong th∆∞ vi·ªán.`,
          context
        );
      }

      const bookIds = books.map((b) => b._id);
      const copies = await SachCopy.find({ MaSach: { $in: bookIds } });

      const reply =
        `üìö M·ªôt s·ªë s√°ch c·ªßa t√°c gi·∫£ **${matchedAuthor}**:\n\n` +
        books
          .map((book, i) => {
            const related = copies.filter((c) => c.MaSach.equals(book._id));
            const total = related.reduce((sum, c) => sum + c.SoQuyen, 0);
            const borrowed = related.reduce(
              (sum, c) => sum + c.SoLuongDaMuon,
              0
            );
            const available = total - borrowed;
            return `${i + 1}. ${book.TenSach} ‚Äì üìö C√≤n: ${available}/${total}`;
          })
          .join("\n");

      return await saveReply(MaDocGia, userMessage, reply, {
        ...context,
        author: matchedAuthor,
        authorId: tacGia._id,
      });
    }

    // 4. Ai l√† t√°c gi·∫£ cu·ªën X
    if (intent === "hoi_tac_gia" && matchedBookTitle) {
      const book = await Sach.findOne({
        TenSach: { $regex: matchedBookTitle, $options: "i" },
      }).populate("TacGia");

      if (!book) {
        return await saveReply(
          MaDocGia,
          userMessage,
          `üìï Kh√¥ng t√¨m th·∫•y cu·ªën s√°ch "${matchedBookTitle}".`,
          context
        );
      }

      const tenTG =
        typeof book.TacGia === "object" && book.TacGia.TenTG
          ? book.TacGia.TenTG
          : book.TacGia;

      const reply = `‚úçÔ∏è Cu·ªën "${book.TenSach}" ƒë∆∞·ª£c vi·∫øt b·ªüi **${tenTG}**.`;
      return await saveReply(MaDocGia, userMessage, reply, {
        bookTitle: book.TenSach,
        author: tenTG,
      });
    }

    // 5. S√°ch ƒë√≥ c√≤n kh√¥ng?
    if (intent === "hoi_sach_con_khong" && matchedBookTitle) {
      const book = await Sach.findOne({
        TenSach: { $regex: matchedBookTitle, $options: "i" },
      });

      if (!book) {
        return await saveReply(
          MaDocGia,
          userMessage,
          `üìï Kh√¥ng t√¨m th·∫•y cu·ªën s√°ch "${matchedBookTitle}".`,
          context
        );
      }

      const reply =
        book.TinhTrang === "het"
          ? `üìï Cu·ªën "${book.TenSach}" hi·ªán **kh√¥ng c√≤n** trong th∆∞ vi·ªán.`
          : `üìó Cu·ªën "${book.TenSach}" v·∫´n c√≤n trong th∆∞ vi·ªán.`;

      return await saveReply(MaDocGia, userMessage, reply, context);
    }

    // Fallback GPT khi kh√¥ng hi·ªÉu intent
    if (intent === "khac") {
      return await saveReply(
        MaDocGia,
        userMessage,
        "ü§ñ Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i r√µ h∆°n kh√¥ng?",
        context
      );
    }

    // GPT fallback
    const fallback = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "B·∫°n l√† tr·ª£ l√Ω th∆∞ vi·ªán, ch·ªâ tr·∫£ l·ªùi theo d·ªØ li·ªáu.",
        },
        ...history.slice(-6),
        { role: "user", content: userMessage },
      ],
    });

    const reply =
      fallback.choices?.[0]?.message?.content ||
      "ü§ñ Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.";

    return await saveReply(MaDocGia, userMessage, reply, context);
  }
}

module.exports = ChatbotService;
